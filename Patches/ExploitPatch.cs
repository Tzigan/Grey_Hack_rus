using HarmonyLib;
using System;
using System.Reflection;
using System.Linq;

namespace GreyHackRussian.Patches
{
    [HarmonyPatch]
    public class ExploitDescriptionPatch
    {
        static MethodBase TargetMethod()
        {
            try
            {
                // Ищем тип Exploit по имени
                var exploitType = AccessTools.TypeByName("Exploit");
                if (exploitType != null)
                {
                    GreyHackRussianPlugin.Log.LogInfo($"Найден тип Exploit: {exploitType.FullName}");

                    // Ищем метод GenerateDescription
                    var method = AccessTools.Method(exploitType, "GenerateDescription");
                    if (method != null)
                    {
                        GreyHackRussianPlugin.Log.LogInfo($"Найден метод GenerateDescription");
                        return method;
                    }
                    else
                    {
                        GreyHackRussianPlugin.Log.LogWarning("Метод GenerateDescription не найден");
                    }
                }
                else
                {
                    GreyHackRussianPlugin.Log.LogWarning("Тип Exploit не найден");
                }
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка при поиске метода: {ex.Message}");
            }
            return null;
        }

        static void Postfix(object __instance)
        {
            try
            {
                // Получаем тип объекта __instance
                Type exploitType = __instance.GetType();
                GreyHackRussianPlugin.Log.LogDebug($"Вызван Postfix для объекта типа {exploitType.Name}");

                // Логируем доступные поля для отладки
                GreyHackRussianPlugin.Log.LogDebug("===== Доступные поля эксплойта =====");
                foreach (var field in exploitType.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public))
                {
                    try
                    {
                        var value = field.GetValue(__instance);
                        GreyHackRussianPlugin.Log.LogDebug($"- {field.Name}: {(value != null ? value.ToString() : "null")}");
                    }
                    catch
                    {
                        GreyHackRussianPlugin.Log.LogDebug($"- {field.Name}: <не удалось получить значение>");
                    }
                }

                // Получаем текущее описание через рефлексию
                var descriptionField = exploitType.GetField("description",
                    BindingFlags.NonPublic | BindingFlags.Instance);

                if (descriptionField != null)
                {
                    GreyHackRussianPlugin.Log.LogDebug($"Найдено поле description в классе {exploitType.Name}");
                    string originalDescription = (string)descriptionField.GetValue(__instance);

                    GreyHackRussianPlugin.Log.LogDebug($"Оригинальное описание: \"{originalDescription}\"");

                    // Переводим описание
                    string translatedDescription = Translator.TranslateText(originalDescription);
                    GreyHackRussianPlugin.Log.LogDebug($"Результат перевода: \"{translatedDescription}\"");

                    if (originalDescription != translatedDescription)
                    {
                        // Устанавливаем переведённое описание
                        descriptionField.SetValue(__instance, translatedDescription);
                        GreyHackRussianPlugin.Log.LogInfo($"Описание эксплойта успешно переведено: \"{originalDescription}\" -> \"{translatedDescription}\"");
                    }
                    else
                    {
                        GreyHackRussianPlugin.Log.LogDebug("Перевод не требуется или не найден в словаре");

                        // Проверяем наличие подстрок для перевода
                        if (originalDescription.Length > 10)
                        {
                            // Проверяем первые 50 символов в словаре переводов
                            string checkPrefix = originalDescription.Substring(0, Math.Min(50, originalDescription.Length));
                            GreyHackRussianPlugin.Log.LogDebug($"Проверка первых 50 символов: \"{checkPrefix}\"");

                            foreach (var kvp in Translator.TranslationDictionary)
                            {
                                if (kvp.Key.StartsWith(checkPrefix) || originalDescription.StartsWith(kvp.Key))
                                {
                                    GreyHackRussianPlugin.Log.LogDebug($"Найдено похожее в словаре: \"{kvp.Key}\" -> \"{kvp.Value}\"");
                                }
                            }
                        }
                    }
                }
                else
                {
                    GreyHackRussianPlugin.Log.LogWarning("Не удалось найти поле description в классе Exploit");

                    // Логируем названия всех полей для поиска альтернатив
                    GreyHackRussianPlugin.Log.LogDebug("Доступные поля с текстом:");
                    foreach (var field in exploitType.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public))
                    {
                        try
                        {
                            var value = field.GetValue(__instance);
                            if (value is string && !string.IsNullOrEmpty((string)value))
                            {
                                GreyHackRussianPlugin.Log.LogDebug($"- {field.Name}: {value}");
                            }
                        }
                        catch { }
                    }
                }
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка в ExploitPatch: {ex.Message}\n{ex.StackTrace}");
            }
        }
    }

    // Дополнительно патчим метод GetShopDescription для перевода в магазине
    [HarmonyPatch]
    public class ExploitGetShopDescriptionPatch
    {
        static MethodBase TargetMethod()
        {
            try
            {
                var exploitType = AccessTools.TypeByName("Exploit");
                if (exploitType != null)
                {
                    var method = AccessTools.Method(exploitType, "GetShopDescription");
                    if (method != null)
                    {
                        GreyHackRussianPlugin.Log.LogInfo("Найден метод GetShopDescription");
                        return method;
                    }
                }
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка при поиске метода GetShopDescription: {ex.Message}");
            }
            return null;
        }

        static void Postfix(ref string __result, object __instance)
        {
            try
            {
                if (!string.IsNullOrEmpty(__result))
                {
                    string original = __result;
                    __result = Translator.TranslateText(original);

                    if (original != __result)
                    {
                        // Добавляем подробное логирование каждого перевода
                        GreyHackRussianPlugin.Log.LogInfo($"GetShopDescription: перевод '{original.Substring(0, Math.Min(50, original.Length))}...' -> '{__result.Substring(0, Math.Min(50, __result.Length))}...'");

                        // Обновляем поле description, чтобы будущие вызовы тоже возвращали перевод
                        Type exploitType = __instance.GetType();
                        var descriptionField = exploitType.GetField("description", BindingFlags.NonPublic | BindingFlags.Instance);
                        if (descriptionField != null)
                        {
                            descriptionField.SetValue(__instance, __result);
                            GreyHackRussianPlugin.Log.LogDebug("Поле description обновлено переведённым текстом");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка в ExploitGetShopDescriptionPatch: {ex.Message}\n{ex.StackTrace}");
            }
        }
    }

    // Патчим конструктор для перевода объектов при их создании
    [HarmonyPatch]
    public class ExploitConstructorPatch
    {
        static MethodBase TargetMethod()
        {
            try
            {
                var exploitType = AccessTools.TypeByName("Exploit");
                if (exploitType != null)
                {
                    var constructors = exploitType.GetConstructors(BindingFlags.Public | BindingFlags.Instance);
                    // Берем конструктор с параметрами (не приватный без параметров)
                    var constructor = constructors.FirstOrDefault(c => c.GetParameters().Length > 0);
                    if (constructor != null)
                    {
                        GreyHackRussianPlugin.Log.LogInfo("Найден конструктор Exploit");
                        return constructor;
                    }
                }
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка при поиске конструктора Exploit: {ex.Message}");
            }
            return null;
        }

        static void Postfix(object __instance)
        {
            try
            {
                GreyHackRussianPlugin.Log.LogDebug("Вызван конструктор Exploit");

                // Здесь мы не будем сразу переводить description,
                // потому что он скорее всего еще не создан в этот момент
                // (метод GenerateDescription вызывается в конце конструктора)
                // Вместо этого поставим отметку в лог для трекинга
                GreyHackRussianPlugin.Log.LogDebug("Создан новый объект Exploit, ожидаем генерацию описания");
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка в ExploitConstructorPatch: {ex.Message}");
            }
        }
    }
}