using HarmonyLib;
using System;
using System.IO;
using System.Reflection;
using System.Collections.Generic;

namespace GreyHackRussian.Patches
{
    /// <summary>
    /// Патч только для метода GetShopDescription, который отвечает за отображение описания эксплойта
    /// </summary>
    [HarmonyPatch(typeof(Exploit), "GetShopDescription")]
    public class ExploitPatch
    {
        // Словарь для кэширования переведенных описаний
        private static readonly Dictionary<string, string> translationCache = new Dictionary<string, string>();

        // Счетчик переведенных описаний
        private static int translatedCount = 0;

        static void Postfix(ref string __result)
        {
            try
            {
                // Проверка на пустую строку
                if (string.IsNullOrEmpty(__result))
                    return;

                string original = __result;

                // Проверяем, был ли этот текст уже переведен ранее
                if (translationCache.TryGetValue(original, out string cachedTranslation))
                {
                    __result = cachedTranslation;
                    GreyHackRussianPlugin.Log.LogInfo($"[Кэш] Использован кэшированный перевод описания ({translatedCount})");
                    return;
                }

                // Переводим текст
                string translated = Translator.TranslateTextIgnoreCase(original);

                // Если перевод отличается от оригинала, обновляем результат
                if (!original.Equals(translated))
                {
                    __result = translated;
                    translatedCount++;

                    // Добавляем в кэш для повторного использования
                    translationCache[original] = translated;

                    // Выводим информацию о переводе в лог (первые 100 символов)
                    int previewLength = Math.Min(100, original.Length);
                    string originalPreview = original.Substring(0, previewLength) + (original.Length > previewLength ? "..." : "");
                    string translatedPreview = translated.Substring(0, Math.Min(100, translated.Length)) + (translated.Length > previewLength ? "..." : "");

                    // Агрессивное логирование
                    GreyHackRussianPlugin.Log.LogInfo("=== ПЕРЕВОД ОПИСАНИЯ ЭКСПЛОЙТА ===");
                    GreyHackRussianPlugin.Log.LogInfo($"Перевод #{translatedCount}");
                    GreyHackRussianPlugin.Log.LogInfo($"ОРИГИНАЛ: {originalPreview}");
                    GreyHackRussianPlugin.Log.LogInfo($"ПЕРЕВОД: {translatedPreview}");
                    GreyHackRussianPlugin.Log.LogInfo("================================");
                }
                else
                {
                    // Вывод в лог информации о непереведенном тексте
                    GreyHackRussianPlugin.Log.LogInfo($"[!] Не найден перевод для описания ({original.Length} символов)");

                    // Добавьте эти строки для вывода полного текста
                    GreyHackRussianPlugin.Log.LogInfo($"===== НЕПЕРЕВЕДЕННЫЙ ТЕКСТ =====");
                    GreyHackRussianPlugin.Log.LogInfo(original);
                    GreyHackRussianPlugin.Log.LogInfo("===============================");

                    // Добавьте эти строки для сохранения в файлы
                    try
                    {
                        // Сохранение для отладки
                        string untranslatedPath = Path.Combine(GreyHackRussianPlugin.PluginPath, "debug_untranslated.txt");
                        File.AppendAllText(untranslatedPath, original + "\n\n---\n\n");

                        // Сохранение в формате для файла переводов
                        string exportPath = Path.Combine(GreyHackRussianPlugin.PluginPath, "export_translations.txt");
                        File.AppendAllText(exportPath, original + "=" + original + "\n\n");
                    }
                    catch (Exception ex)
                    {
                        GreyHackRussianPlugin.Log.LogError($"Ошибка при сохранении непереведенного текста: {ex.Message}");
                    }

                    // Проверяем, есть ли похожие ключи в словаре переводов
                    if (original.Length > 10)
                    {
                        // Остальной код остается без изменений...
                    }
                }
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка при переводе описания: {ex.Message}");
                GreyHackRussianPlugin.Log.LogDebug($"Stack trace: {ex.StackTrace}");
            }
        }
    }
}