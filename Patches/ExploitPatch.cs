using HarmonyLib;
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using GreyHackRussianPlugin.DebugTools;

namespace GreyHackRussianPlugin.Patches
{
    /// <summary>
    /// Патч метода GetShopDescription с интеллектуальным сопоставлением текстов
    /// </summary>
    [HarmonyPatch(typeof(Exploit), "GetShopDescription")]
    public class ExploitPatch
    {
        // Отладчик перевода для сохранения непереведенных текстов и кэширования
        private static DebugTranslationExploit _debugTranslation;

        // Логгер для эксплойтов
        private static ExploitLogger _logger;

        // Список игнорируемых слов (имена, числа и т.д.)
        private static readonly HashSet<string> ignoredWords = new HashSet<string>
        {
            "libssh", "libftp", "libhttp", "libsmtp", "libchat", "libadb",
            "v1.0.0", "v1.0.1", "v1.1.0", "v1.2.0", "v2.0.0",
            "ssh", "ftp", "http", "smtp", "chat", "adb", "rshell", "cam",
            "root", "guest", "/bin", "/usr", "/sys", "/etc", "/lib", "/home",
            "Mail.txt", "passwd", ">="
        };

        // Список общих фраз для замены
        private static readonly Dictionary<string, string> commonPhrases = new Dictionary<string, string>
        {
            { "Get access to a shell.", "Получить доступ к командной оболочке." },
            { "Remote use.", "Удаленное использование." },
            { "For local use only.", "Только для локального использования." },
            { "Permissions obtained:", "Получаемые права:" },
            { "Target:", "Цель:" },
            { "Required:", "Требуется:" },
            { "guest", "guest" },
            { "root", "root" },
            { "Non root user", "Пользователь без root-прав" },
            { "Root user logged in the computer", "Root-пользователь авторизован в системе" },
            { "Guest user logged in the computer", "Guest авторизован в системе" },
            { "Any user logged in the computer", "Любой пользователь авторизован в системе" },
            { "Take advantage of a vulnerability in the", "Использует уязвимость в сервисе" },
            { "service to inject a new password to a registered user", "для внедрения нового пароля зарегистрированному пользователю" },
            { "Search all the Bank credentials files in the computer to decipher all passwords", "Найти и расшифровать все файлы учетных данных Банка в компьютере" },
            { "It is necessary to have the decipher program installed in the computer that launch the exploit", "Необходимо иметь программу расшифровки, установленную на компьютере, с которого запускается эксплойт" },
            { "Prints the contents of the file", "Отображает содержимое файла" },
            { "Grant access to the file", "Предоставляет доступ к файлу" },
            { "Grant access to the path", "Предоставляет доступ к пути" },
            { "and prints their contents", "и выводит его содержимое" },
            { "and decipher its contents", "и расшифровывает его содержимое" },
            { "of all users in the computer", "всех пользователей в компьютере" },
            { "Change all firewall entries to \"allowed\"", "Изменить все записи брандмауэра на \"разрешено\"" },
            { "Unlock the settings of the smart device.", "Разблокировать настройки умного устройства." },
            { "Inject code into an active traffic camera system to allow control of the traffic lights.", "Внедрить код в активную систему дорожных камер для получения контроля над светофорами." },
            { "Grant access to the computer connected to the router in the specified address and grant access to the file /etc/passwd and decipher its contents.", "Предоставляет доступ компьютеру подключенному к маршрутизатору по указанному адресу, и получить доступ к файлу /etc/passwd с расшифровкой его содержимого." },
            { "Connected in the same local network as the target.", "Подключение в той же локальной сети, что и цель." },
            { "Grant access to the computer connected to the router in the specified address and grant access to the file /etc/passwd", "Предоставляет доступ компьютеру подключенному к маршрутизатору по указанному адресу, и получить доступ к файлу /etc/passwd" },
        };

        // Шаблоны для замены
        private static readonly Dictionary<string, string> patterns = new Dictionary<string, string>
        {
            { @"Dependencies on library ([a-z0-9_\.]+) >= ([0-9\.]+)", "Зависимость от библиотеки $1 >= $2" },
            { @"Minimum number of ([0-9]+) users registered in the computer", "Минимум $1 пользователь зарегистрирован в системе" },
            { @"([\\/a-zA-Z0-9_\.]+) exists in the file system", "$1 существует в файловой системе" },
            { @"([0-9]+) port forwarding configured from router to the target computer", "$1 перенаправление порта настроено с маршрутизатора на целевой компьютер" }
        };

        // Специальные случаи для полных путей и фраз
        private static readonly Dictionary<string, string> specialCases = new Dictionary<string, string>
        {
            { "/home/user/Mail.txt of all users in the computer", "/home/user/Mail.txt всех пользователей в компьютере" },
            { "<color=#0FABFFFF>ssh</color>", "<color=#0FABFFFF>ssh</color>" },
            { "<color=#0FABFFFF>ftp</color>", "<color=#0FABFFFF>ftp</color>" },
            { "<color=#0FABFFFF>http</color>", "<color=#0FABFFFF>http</color>" },
            { "<color=#0FABFFFF>smtp</color>", "<color=#0FABFFFF>smtp</color>" },
            { "<color=#0FABFFFF>chat</color>", "<color=#0FABFFFF>chat</color>" },
            { "<color=#0FABFFFF>cam</color>", "<color=#0FABFFFF>cam</color>" },
            { "<color=#0FABFFFF>rshell</color>", "<color=#0FABFFFF>rshell</color>" },
            { "<color=#0FABFFFF>repository</color>", "<color=#0FABFFFF>repository</color>" },
            { "<color=#0FABFFFF>blockchain</color>", "<color=#0FABFFFF>blockchain</color>" },
            { "<color=#0FABFFFF>adb</color>", "<color=#0FABFFFF>adb</color>" },
            { "<color=#0FABFFFF>smartappliance</color>", "<color=#0FABFFFF>smartappliance</color>" },
            { "<color=#0FABFFFF>aptclient</color>", "<color=#0FABFFFF>aptclient</color>" },
            { "<color=#0FABFFFF>net</color>", "<color=#0FABFFFF>net</color>" }
        };

        // Инициализация - должна вызываться при старте плагина
        public static void Initialize()
        {
            // Создаем экземпляр логгера для эксплойтов
            _logger = new ExploitLogger(GreyHackRussianPlugin.Log);
            _logger.LogInfo("Инициализация ExploitPatch...");

            // Создаем экземпляр отладчика перевода
            _debugTranslation = new DebugTranslationExploit(
                GreyHackRussianPlugin.Log,
                GreyHackRussianPlugin.PluginPath,
                ignoredWords
            );
        }

        /// <summary>
        /// Интеллектуальный перевод по частям с сохранением форматирования
        /// </summary>
        private static string TranslateByParts(string original)
        {
            string result = original;

            // Сохраняем HTML теги, заменяя их на временные метки
            Dictionary<string, string> htmlTags = new Dictionary<string, string>();
            int tagIndex = 0;

            // Особая обработка цветных тегов для сервисов ssh/ftp/http
            Regex serviceRegex = new Regex(@"<color=#0FABFFFF>([a-z]+)</color>");
            foreach (Match match in serviceRegex.Matches(original))
            {
                string service = match.Value;
                string placeholder = $"__SERVICE_{tagIndex}__";
                htmlTags[placeholder] = service;
                result = result.Replace(service, placeholder);
                tagIndex++;
            }

            // Регулярное выражение для поиска других HTML тегов
            var tagRegex = new Regex(@"<[^>]+>");
            foreach (Match match in tagRegex.Matches(result))
            {
                string tag = match.Value;
                if (!htmlTags.ContainsValue(tag)) // Пропускаем уже сохраненные сервисные теги
                {
                    string placeholder = $"__TAG_{tagIndex}__";
                    htmlTags[placeholder] = tag;
                    result = result.Replace(tag, placeholder);
                    tagIndex++;
                }
            }

            // Обработка специальных случаев (полные фразы с путями и т.д.)
            foreach (var specialCase in specialCases)
            {
                result = result.Replace(specialCase.Key, specialCase.Value);
            }

            // 1. Проверяем полные блоки текста через словарь переводов
            foreach (var kvp in Translation.Translator.TranslationDictionary)
            {
                if (result.Contains(kvp.Key) && kvp.Key.Length > 10)
                {
                    result = result.Replace(kvp.Key, kvp.Value);
                }
            }

            // 2. Заменяем общие фразы
            foreach (var phrase in commonPhrases)
            {
                if (result.Contains(phrase.Key))
                {
                    result = result.Replace(phrase.Key, phrase.Value);
                }
            }

            // 3. Применяем регулярные выражения для шаблонных замен
            foreach (var pattern in patterns)
            {
                result = Regex.Replace(result, pattern.Key, pattern.Value);
            }

            // Восстанавливаем HTML теги
            foreach (var tag in htmlTags)
            {
                result = result.Replace(tag.Key, tag.Value);
            }

            return result;
        }

        /// <summary>
        /// Harmony Postfix - вызывается после оригинального метода
        /// </summary>
        [HarmonyPostfix]
        static void Postfix(ref string __result)
        {
            try
            {
                // Проверяем, инициализирован ли отладчик и логгер
                if (_debugTranslation == null || _logger == null)
                {
                    Initialize();
                }

                // Проверка на пустую строку
                if (string.IsNullOrEmpty(__result))
                    return;

                string original = __result;

                // Проверяем, был ли этот текст уже переведен ранее
                if (_debugTranslation.TryGetCachedTranslation(original, out string cachedTranslation))
                {
                    __result = cachedTranslation;
                    _logger.LogCacheUsage(_debugTranslation.GetTranslatedCount());
                    return;
                }

                // Многоуровневый подход к переводу
                string translated = original;

                // 1. Сначала пытаемся найти точный перевод
                translated = Translation.Translator.TranslateTextIgnoreCase(original);

                // 2. Если точного перевода нет, пытаемся перевести частями с поддержкой форматирования HTML
                if (translated == original)
                {
                    translated = TranslateByParts(original);
                }

                // Если произошел перевод (хотя бы частичный)
                if (translated != original)
                {
                    // Проверяем качество перевода
                    bool isNotFullyTranslated = _debugTranslation.IsUntranslated(original, translated);

                    if (isNotFullyTranslated)
                    {
                        // Текст переведен частично - сохраняем в XML для анализа
                        _logger.LogPartialTranslation(_debugTranslation.GetTranslationThreshold());

                        // Вычисляем примерное качество перевода
                        float translationQuality = _debugTranslation.CalculateTranslationQuality(original, translated);

                        // Сохраняем в XML только если качество ниже порогового значения
                        _debugTranslation.SaveUntranslatedTextToXml(original, translated, translationQuality);
                        _logger.LogXmlSave(translationQuality);
                    }

                    // Увеличиваем счетчик переведенных текстов
                    _debugTranslation.IncrementTranslatedCount();

                    // Добавляем в кэш для повторного использования
                    _debugTranslation.AddToCache(original, translated);

                    // Выводим информацию о переводе в лог (первые 100 символов)
                    int previewLength = Math.Min(100, original.Length);
                    string originalPreview = original.Substring(0, previewLength) + (original.Length > previewLength ? "..." : "");
                    string translatedPreview = translated.Substring(0, Math.Min(100, translated.Length)) + (translated.Length > previewLength ? "..." : "");

                    // Логирование через специализированный логгер
                    _logger.LogTranslation(_debugTranslation.GetTranslatedCount(), originalPreview, translatedPreview);

                    // Используем перевод
                    __result = translated;
                }
                else
                {
                    // Увеличиваем счетчик непереведенных текстов
                    _debugTranslation.IncrementUntranslatedCount();

                    // Текст не переведен совсем - сохраняем в XML для последующего анализа
                    _debugTranslation.SaveUntranslatedTextToXml(original, original, 0.0f);

                    // Вывод в лог через специализированный логгер
                    _logger.LogMissingTranslation(original);
                }
            }
            catch (Exception ex)
            {
                // Обработка ошибок через специализированный логгер
                _logger?.LogError($"Ошибка при переводе описания: {ex.Message}", ex);
            }
        }
    }
}