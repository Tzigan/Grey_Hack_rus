using HarmonyLib;
using System;
using System.Reflection;

namespace GreyHackRussian.Patches
{
    [HarmonyPatch]
    public class ExploitDescriptionPatch
    {
        static MethodBase TargetMethod()
        {
            try
            {
                // Ищем тип Exploit по имени
                var exploitType = AccessTools.TypeByName("Exploit");
                if (exploitType != null)
                {
                    GreyHackRussianPlugin.Log.LogInfo($"Найден тип Exploit: {exploitType.FullName}");

                    // Ищем метод GenerateDescription
                    var method = AccessTools.Method(exploitType, "GenerateDescription");
                    if (method != null)
                    {
                        GreyHackRussianPlugin.Log.LogInfo($"Найден метод GenerateDescription");
                        return method;
                    }
                    else
                    {
                        GreyHackRussianPlugin.Log.LogWarning("Метод GenerateDescription не найден");
                    }
                }
                else
                {
                    GreyHackRussianPlugin.Log.LogWarning("Тип Exploit не найден");
                }
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка при поиске метода: {ex.Message}");
            }
            return null;
        }

        static void Postfix(object __instance)
        {
            try
            {
                // Получаем тип объекта __instance
                Type exploitType = __instance.GetType();

                // Получаем текущее описание через рефлексию
                var descriptionField = exploitType.GetField("description",
                    BindingFlags.NonPublic | BindingFlags.Instance);

                if (descriptionField != null)
                {
                    string originalDescription = (string)descriptionField.GetValue(__instance);

                    // Переводим описание
                    string translatedDescription = Translator.TranslateText(originalDescription);

                    if (originalDescription != translatedDescription)
                    {
                        // Устанавливаем переведённое описание
                        descriptionField.SetValue(__instance, translatedDescription);
                        GreyHackRussianPlugin.Log.LogInfo("Описание эксплойта успешно переведено");
                    }
                }
                else
                {
                    GreyHackRussianPlugin.Log.LogWarning("Не удалось найти поле description в классе Exploit");
                }
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка в ExploitPatch: {ex.Message}\n{ex.StackTrace}");
            }
        }
    }

    // Дополнительно патчим метод GetShopDescription для перевода в магазине
    [HarmonyPatch]
    public class ExploitGetShopDescriptionPatch
    {
        static MethodBase TargetMethod()
        {
            try
            {
                var exploitType = AccessTools.TypeByName("Exploit");
                if (exploitType != null)
                {
                    var method = AccessTools.Method(exploitType, "GetShopDescription");
                    if (method != null)
                    {
                        return method;
                    }
                }
            }
            catch { }
            return null;
        }

        static void Postfix(ref string __result)
        {
            if (!string.IsNullOrEmpty(__result))
            {
                __result = Translator.TranslateText(__result);
            }
        }
    }
}