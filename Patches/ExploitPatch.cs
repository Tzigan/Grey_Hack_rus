using HarmonyLib;
using System;
using System.IO;
using System.Reflection;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Text;

namespace GreyHackRussian.Patches
{
    /// <summary>
    /// Патч метода GetShopDescription с интеллектуальным сопоставлением текстов
    /// </summary>
    [HarmonyPatch(typeof(Exploit), "GetShopDescription")]
    public class ExploitPatch
    {
        // Словарь для кэширования переведенных описаний
        private static readonly Dictionary<string, string> translationCache = new Dictionary<string, string>();

        // Счетчик переведенных описаний
        private static int translatedCount = 0;

        // Флаг для предотвращения многократной записи одних и тех же текстов в debug-файлы
        private static bool hasDebuggedTranslation = false;

        // Список общих фраз для замены
        private static readonly Dictionary<string, string> commonPhrases = new Dictionary<string, string>
        {
            { "Get access to a shell.", "Получить доступ к командной оболочке." },
            { "Remote use.", "Удаленное использование." },
            { "For local use only.", "Только для локального использования." },
            { "Permissions obtained:", "Получаемые права:" },
            { "Target:", "Цель:" },
            { "Required:", "Требуется:" },
            { "guest", "guest" },
            { "root", "root" },
            { "Non root user", "Пользователь без root-прав" },
            { "Root user logged in the computer", "Root-пользователь авторизован в системе" },
            { "Guest user logged in the computer", "Guest авторизован в системе" },
            { "Any user logged in the computer", "Любой пользователь авторизован в системе" },
            { "Take advantage of a vulnerability in the", "Использует уязвимость в сервисе" },
            { "service to inject a new password to a registered user", "для внедрения нового пароля зарегистрированному пользователю" },
            { "Search all the Bank credentials files in the computer to decipher all passwords", "Найти и расшифровать все файлы учетных данных Банка в компьютере" },
            { "It is necessary to have the decipher program installed in the computer that launch the exploit", "Необходимо иметь программу расшифровки, установленную на компьютере, с которого запускается эксплойт" },
            { "Prints the contents of the file", "Отображает содержимое файла" },
            { "Grant access to the file", "Предоставляет доступ к файлу" },
            { "Grant access to the path", "Предоставляет доступ к пути" },
            { "and prints their contents", "и выводит его содержимое" },
            { "and decipher its contents", "и расшифровывает его содержимое" },
            { "of all users in the computer", "всех пользователей в компьютере" },
            { "Change all firewall entries to \"allowed\"", "Изменить все записи брандмауэра на \"разрешено\"" },
            { "Unlock the settings of the smart device.", "Разблокировать настройки умного устройства." }
        };

        // Шаблоны для замены
        private static readonly Dictionary<string, string> patterns = new Dictionary<string, string>
        {
            { @"Dependencies on library ([a-z0-9_\.]+) >= ([0-9\.]+)", "Зависимость от библиотеки $1 >= $2" },
            { @"Minimum number of ([0-9]+) users registered in the computer", "Минимум $1 пользователь зарегистрирован в системе" },
            { @"([\\/a-zA-Z0-9_\.]+) exists in the file system", "$1 существует в файловой системе" },
            { @"([0-9]+) port forwarding configured from router to the target computer", "$1 перенаправление порта настроено с маршрутизатора на целевой компьютер" }
        };

        // Специальные случаи для полных путей и фраз
        private static readonly Dictionary<string, string> specialCases = new Dictionary<string, string>
        {
            { "/home/user/Mail.txt of all users in the computer", "/home/user/Mail.txt всех пользователей в компьютере" },
            { "<color=#0FABFFFF>ssh</color>", "<color=#0FABFFFF>ssh</color>" },
            { "<color=#0FABFFFF>ftp</color>", "<color=#0FABFFFF>ftp</color>" },
            { "<color=#0FABFFFF>http</color>", "<color=#0FABFFFF>http</color>" },
            { "<color=#0FABFFFF>smtp</color>", "<color=#0FABFFFF>smtp</color>" },
            { "<color=#0FABFFFF>chat</color>", "<color=#0FABFFFF>chat</color>" },
            { "<color=#0FABFFFF>cam</color>", "<color=#0FABFFFF>cam</color>" },
            { "<color=#0FABFFFF>rshell</color>", "<color=#0FABFFFF>rshell</color>" },
            { "<color=#0FABFFFF>repository</color>", "<color=#0FABFFFF>repository</color>" },
            { "<color=#0FABFFFF>blockchain</color>", "<color=#0FABFFFF>blockchain</color>" },
            { "<color=#0FABFFFF>adb</color>", "<color=#0FABFFFF>adb</color>" },
            { "<color=#0FABFFFF>smartappliance</color>", "<color=#0FABFFFF>smartappliance</color>" },
            { "<color=#0FABFFFF>aptclient</color>", "<color=#0FABFFFF>aptclient</color>" },
            { "<color=#0FABFFFF>net</color>", "<color=#0FABFFFF>net</color>" }
        };

        /// <summary>
        /// Публичный метод для экспорта текста в файлы переводов
        /// </summary>
        /// <param name="original">Оригинальный текст для экспорта</param>
        public static void ExportTranslation(string original)
        {
            if (string.IsNullOrWhiteSpace(original)) return;

            try
            {
                // Сохранение для отладки
                string untranslatedPath = Path.Combine(GreyHackRussianPlugin.PluginPath, "debug_untranslated.txt");
                using (StreamWriter writerDebug = new StreamWriter(untranslatedPath, true, Encoding.UTF8))
                {
                    writerDebug.WriteLine(original);
                    writerDebug.WriteLine();
                    writerDebug.WriteLine("---");
                    writerDebug.WriteLine();
                }

                // Сохранение для файла переводов с совершенно новым форматом
                // Избегаем любых знаков равенства для предотвращения путаницы
                string exportPath = Path.Combine(GreyHackRussianPlugin.PluginPath, "export_translations.txt");
                using (StreamWriter writerExport = new StreamWriter(exportPath, true, Encoding.UTF8))
                {
                    // Используем более заметные разделители и явные метки
                    writerExport.WriteLine("######## НОВЫЙ БЛОК ПЕРЕВОДА ########");
                    writerExport.WriteLine("## ОРИГИНАЛЬНЫЙ ТЕКСТ:");
                    writerExport.WriteLine(original);
                    writerExport.WriteLine();
                    writerExport.WriteLine("## ПЕРЕВОД:");
                    writerExport.WriteLine(original); // Пока копируем оригинал как шаблон
                    writerExport.WriteLine();
                    writerExport.WriteLine("######## КОНЕЦ БЛОКА ПЕРЕВОДА ########");
                    writerExport.WriteLine();
                    writerExport.WriteLine();
                }

                // Также создаем файл с разбиением на строки для удобства перевода
                string splitPath = Path.Combine(GreyHackRussianPlugin.PluginPath, "split_translations.txt");
                using (StreamWriter writerSplit = new StreamWriter(splitPath, true, Encoding.UTF8))
                {
                    writerSplit.WriteLine("// НОВЫЙ БЛОК ПЕРЕВОДА ПО СТРОКАМ");

                    // Разделяем текст на строки по переносам
                    string[] lines = original.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    foreach (var line in lines)
                    {
                        if (!string.IsNullOrWhiteSpace(line))
                        {
                            // Используем двойную стрелку вместо знака равенства для разделения
                            writerSplit.WriteLine(line.Trim() + " => " + line.Trim());
                        }
                    }

                    writerSplit.WriteLine("// КОНЕЦ БЛОКА ПЕРЕВОДА");
                    writerSplit.WriteLine("----------------------------------------");
                    writerSplit.WriteLine();
                }
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка при экспорте текста: {ex.Message}");
                GreyHackRussianPlugin.Log.LogDebug($"Stack trace: {ex.StackTrace}");
            }
        }

        static void Postfix(ref string __result)
        {
            try
            {
                // Проверка на пустую строку
                if (string.IsNullOrEmpty(__result))
                    return;

                string original = __result;

                // Проверяем, был ли этот текст уже переведен ранее
                if (translationCache.TryGetValue(original, out string cachedTranslation))
                {
                    __result = cachedTranslation;
                    GreyHackRussianPlugin.Log.LogInfo($"[Кэш] Использован кэшированный перевод описания ({translatedCount})");
                    return;
                }

                // Многоуровневый подход к переводу
                string translated = original;

                // 1. Сначала пытаемся найти точный перевод
                translated = Translator.TranslateTextIgnoreCase(original);

                // 2. Если точного перевода нет, пытаемся перевести частями с поддержкой форматирования HTML
                if (translated == original)
                {
                    translated = TranslateByParts(original);
                }

                // Если произошел перевод
                if (translated != original)
                {
                    __result = translated;
                    translatedCount++;

                    // Добавляем в кэш для повторного использования
                    translationCache[original] = translated;

                    // Выводим информацию о переводе в лог (первые 100 символов)
                    int previewLength = Math.Min(100, original.Length);
                    string originalPreview = original.Substring(0, previewLength) + (original.Length > previewLength ? "..." : "");
                    string translatedPreview = translated.Substring(0, Math.Min(100, translated.Length)) + (translated.Length > previewLength ? "..." : "");

                    // Агрессивное логирование
                    GreyHackRussianPlugin.Log.LogInfo("=== ПЕРЕВОД ОПИСАНИЯ ЭКСПЛОЙТА ===");
                    GreyHackRussianPlugin.Log.LogInfo($"Перевод #{translatedCount}");
                    GreyHackRussianPlugin.Log.LogInfo($"ОРИГИНАЛ: {originalPreview}");
                    GreyHackRussianPlugin.Log.LogInfo($"ПЕРЕВОД: {translatedPreview}");
                    GreyHackRussianPlugin.Log.LogInfo("================================");
                }
                else
                {
                    // Вывод в лог информации о непереведенном тексте
                    GreyHackRussianPlugin.Log.LogInfo($"[!] Не найден перевод для описания ({original.Length} символов)");
                    GreyHackRussianPlugin.Log.LogInfo($"===== НЕПЕРЕВЕДЕННЫЙ ТЕКСТ =====");
                    GreyHackRussianPlugin.Log.LogInfo(original);
                    GreyHackRussianPlugin.Log.LogInfo("===============================");

                    try
                    {
                        // Ограничиваем запись в файлы для предотвращения слишком большого размера
                        if (!hasDebuggedTranslation)
                        {
                            // Вызываем метод экспорта вместо встроенного кода
                            ExportTranslation(original);

                            // После первой записи ставим флаг, чтобы не писать слишком много
                            hasDebuggedTranslation = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        GreyHackRussianPlugin.Log.LogError($"Ошибка при сохранении непереведенного текста: {ex.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка при переводе описания: {ex.Message}");
                GreyHackRussianPlugin.Log.LogDebug($"Stack trace: {ex.StackTrace}");
            }
        }

        /// <summary>
        /// Интеллектуальный перевод по частям с сохранением форматирования
        /// </summary>
        private static string TranslateByParts(string original)
        {
            string result = original;

            // Сохраняем HTML теги, заменяя их на временные метки
            Dictionary<string, string> htmlTags = new Dictionary<string, string>();
            int tagIndex = 0;

            // Особая обработка цветных тегов для сервисов ssh/ftp/http
            Regex serviceRegex = new Regex(@"<color=#0FABFFFF>([a-z]+)</color>");
            foreach (Match match in serviceRegex.Matches(original))
            {
                string service = match.Value;
                string placeholder = $"__SERVICE_{tagIndex}__";
                htmlTags[placeholder] = service;
                result = result.Replace(service, placeholder);
                tagIndex++;
            }

            // Регулярное выражение для поиска других HTML тегов
            var tagRegex = new Regex(@"<[^>]+>");
            foreach (Match match in tagRegex.Matches(result))
            {
                string tag = match.Value;
                if (!htmlTags.ContainsValue(tag)) // Пропускаем уже сохраненные сервисные теги
                {
                    string placeholder = $"__TAG_{tagIndex}__";
                    htmlTags[placeholder] = tag;
                    result = result.Replace(tag, placeholder);
                    tagIndex++;
                }
            }

            // Обработка специальных случаев (полные фразы с путями и т.д.)
            foreach (var specialCase in specialCases)
            {
                result = result.Replace(specialCase.Key, specialCase.Value);
            }

            // 1. Проверяем полные блоки текста через словарь переводов
            foreach (var kvp in Translator.TranslationDictionary)
            {
                if (result.Contains(kvp.Key) && kvp.Key.Length > 10)
                {
                    result = result.Replace(kvp.Key, kvp.Value);
                }
            }

            // 2. Заменяем общие фразы
            foreach (var phrase in commonPhrases)
            {
                if (result.Contains(phrase.Key))
                {
                    result = result.Replace(phrase.Key, phrase.Value);
                }
            }

            // 3. Применяем регулярные выражения для шаблонных замен
            foreach (var pattern in patterns)
            {
                result = Regex.Replace(result, pattern.Key, pattern.Value);
            }

            // Восстанавливаем HTML теги
            foreach (var tag in htmlTags)
            {
                result = result.Replace(tag.Key, tag.Value);
            }

            // Проверяем, произошли ли изменения
            return (result != original) ? result : original;
        }

        /// <summary>
        /// Создает новый файл переводов на основе непереведенных строк
        /// </summary>
        public static void ExportMissingTranslations()
        {
            string untranslatedPath = Path.Combine(GreyHackRussianPlugin.PluginPath, "debug_untranslated.txt");
            string translationsPath = Path.Combine(GreyHackRussianPlugin.PluginPath, "new_translations.txt");

            if (File.Exists(untranslatedPath))
            {
                string content = File.ReadAllText(untranslatedPath);
                string[] blocks = content.Split(new[] { "\n\n---\n\n" }, StringSplitOptions.RemoveEmptyEntries);

                StringBuilder sb = new StringBuilder();
                foreach (var block in blocks)
                {
                    if (!string.IsNullOrWhiteSpace(block))
                    {
                        sb.AppendLine(block + "=" + block);
                        sb.AppendLine();
                    }
                }

                File.WriteAllText(translationsPath, sb.ToString());
                GreyHackRussianPlugin.Log.LogInfo($"Создан файл с шаблонами переводов: {translationsPath}");
            }
        }
    }
}