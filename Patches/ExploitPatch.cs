using HarmonyLib;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;
using UnityEngine;
using static AdvancedTutorial;
using static UnityEngine.UI.Image;

namespace GreyHackRussianPlugin.Patches
{
    /// <summary>
    /// Патч метода GetShopDescription с интеллектуальным сопоставлением текстов
    /// </summary>
    [HarmonyPatch(typeof(Exploit), "GetShopDescription")]
    public class ExploitPatch
    {
        // Словарь для кэширования переведенных описаний
        private static readonly Dictionary<string, string> translationCache = new Dictionary<string, string>();

        // Счетчик переведенных описаний
        private static int translatedCount = 0;

        // Счетчик непереведенных описаний
        private static int untranslatedCount = 0;

        // Путь к XML файлу с непереведенными текстами
        private static readonly string untranslatedXmlPath = Path.Combine(
            GreyHackRussianPlugin.PluginPath,
            "ExploitPatch",
            "untranslated_texts.xml"
        );

        // Порог перевода - если переведено менее X% слов, считаем текст непереведенным
        private static readonly float translationThreshold = 0.7f; // 70%

        // Список игнорируемых слов (имена, числа и т.д.)
        private static readonly HashSet<string> ignoredWords = new HashSet<string>
        {
            "libssh", "libftp", "libhttp", "libsmtp", "libchat", "libadb",
            "v1.0.0", "v1.0.1", "v1.1.0", "v1.2.0", "v2.0.0",
            "ssh", "ftp", "http", "smtp", "chat", "adb", "rshell", "cam",
            "root", "guest", "/bin", "/usr", "/sys", "/etc", "/lib", "/home",
            "Mail.txt", "passwd", ">="
        };

        // Список общих фраз для замены
        private static readonly Dictionary<string, string> commonPhrases = new Dictionary<string, string>
        {
            { "Get access to a shell.", "Получить доступ к командной оболочке." },
            { "Remote use.", "Удаленное использование." },
            { "For local use only.", "Только для локального использования." },
            { "Permissions obtained:", "Получаемые права:" },
            { "Target:", "Цель:" },
            { "Required:", "Требуется:" },
            { "guest", "guest" },
            { "root", "root" },
            { "Non root user", "Пользователь без root-прав" },
            { "Root user logged in the computer", "Root-пользователь авторизован в системе" },
            { "Guest user logged in the computer", "Guest авторизован в системе" },
            { "Any user logged in the computer", "Любой пользователь авторизован в системе" },
            { "Take advantage of a vulnerability in the", "Использует уязвимость в сервисе" },
            { "service to inject a new password to a registered user", "для внедрения нового пароля зарегистрированному пользователю" },
            { "Search all the Bank credentials files in the computer to decipher all passwords", "Найти и расшифровать все файлы учетных данных Банка в компьютере" },
            { "It is necessary to have the decipher program installed in the computer that launch the exploit", "Необходимо иметь программу расшифровки, установленную на компьютере, с которого запускается эксплойт" },
            { "Prints the contents of the file", "Отображает содержимое файла" },
            { "Grant access to the file", "Предоставляет доступ к файлу" },
            { "Grant access to the path", "Предоставляет доступ к пути" },
            { "and prints their contents", "и выводит его содержимое" },
            { "and decipher its contents", "и расшифровывает его содержимое" },
            { "of all users in the computer", "всех пользователей в компьютере" },
            { "Change all firewall entries to \"allowed\"", "Изменить все записи брандмауэра на \"разрешено\"" },
            { "Unlock the settings of the smart device.", "Разблокировать настройки умного устройства." },
            { "Inject code into an active traffic camera system to allow control of the traffic lights.", "Внедрить код в активную систему дорожных камер для получения контроля над светофорами." },
            { "Grant access to the computer connected to the router in the specified address and grant access to the file /etc/passwd and decipher its contents.", "Предоставляет доступ компьютеру подключенному к маршрутизатору по указанному адресу, и получить доступ к файлу /etc/passwd с расшифровкой его содержимого." },
            { "Connected in the same local network as the target.", "Подключение в той же локальной сети, что и цель." },
            { "Grant access to the computer connected to the router in the specified address and grant access to the file /etc/passwd", "Предоставляет доступ компьютеру подключенному к маршрутизатору по указанному адресу, и получить доступ к файлу /etc/passwd" },
        };

        // Шаблоны для замены
        private static readonly Dictionary<string, string> patterns = new Dictionary<string, string>
        {
            { @"Dependencies on library ([a-z0-9_\.]+) >= ([0-9\.]+)", "Зависимость от библиотеки $1 >= $2" },
            { @"Minimum number of ([0-9]+) users registered in the computer", "Минимум $1 пользователь зарегистрирован в системе" },
            { @"([\\/a-zA-Z0-9_\.]+) exists in the file system", "$1 существует в файловой системе" },
            { @"([0-9]+) port forwarding configured from router to the target computer", "$1 перенаправление порта настроено с маршрутизатора на целевой компьютер" }
        };

        // Специальные случаи для полных путей и фраз
        private static readonly Dictionary<string, string> specialCases = new Dictionary<string, string>
        {
            { "/home/user/Mail.txt of all users in the computer", "/home/user/Mail.txt всех пользователей в компьютере" },
            { "<color=#0FABFFFF>ssh</color>", "<color=#0FABFFFF>ssh</color>" },
            { "<color=#0FABFFFF>ftp</color>", "<color=#0FABFFFF>ftp</color>" },
            { "<color=#0FABFFFF>http</color>", "<color=#0FABFFFF>http</color>" },
            { "<color=#0FABFFFF>smtp</color>", "<color=#0FABFFFF>smtp</color>" },
            { "<color=#0FABFFFF>chat</color>", "<color=#0FABFFFF>chat</color>" },
            { "<color=#0FABFFFF>cam</color>", "<color=#0FABFFFF>cam</color>" },
            { "<color=#0FABFFFF>rshell</color>", "<color=#0FABFFFF>rshell</color>" },
            { "<color=#0FABFFFF>repository</color>", "<color=#0FABFFFF>repository</color>" },
            { "<color=#0FABFFFF>blockchain</color>", "<color=#0FABFFFF>blockchain</color>" },
            { "<color=#0FABFFFF>adb</color>", "<color=#0FABFFFF>adb</color>" },
            { "<color=#0FABFFFF>smartappliance</color>", "<color=#0FABFFFF>smartappliance</color>" },
            { "<color=#0FABFFFF>aptclient</color>", "<color=#0FABFFFF>aptclient</color>" },
            { "<color=#0FABFFFF>net</color>", "<color=#0FABFFFF>net</color>" }
        };

        // Инициализация - должна вызываться при старте плагина
        public static void Initialize()
        {
            GreyHackRussianPlugin.Log.LogInfo("Инициализация ExploitPatch...");

            // Обеспечить существование директорий
            EnsureDirectoriesExist();

            // Инициализация XML файла с непереведенными текстами
            InitializeXmlFile();
        }

        /// <summary>
        /// Проверка и создание необходимых директорий
        /// </summary>
        private static void EnsureDirectoriesExist()
        {
            try
            {
                string exploitPatchDir = Path.Combine(GreyHackRussianPlugin.PluginPath, "ExploitPatch");
                if (!Directory.Exists(exploitPatchDir))
                {
                    Directory.CreateDirectory(exploitPatchDir);
                    GreyHackRussianPlugin.Log.LogInfo($"Создана директория для ExploitPatch: {exploitPatchDir}");
                }
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка при создании директорий: {ex.Message}");
            }
        }

        /// <summary>
        /// Инициализация XML-файла для непереведенных текстов
        /// </summary>
        private static void InitializeXmlFile()
        {
            try
            {
                if (!File.Exists(untranslatedXmlPath))
                {
                    XmlDocument xmlDoc = new XmlDocument();

                    // Добавляем комментарий с описанием файла - исправлено форматирование
                    XmlComment comment = xmlDoc.CreateComment(@"
    Файл содержит непереведенные или частично переведенные тексты эксплойтов.
    
    Структура файла:
    <untranslated_texts> - корневой элемент
        <statistics> - статистическая информация
            <total_texts> - общее количество обработанных текстов
            <fully_translated> - полностью переведенные тексты
            <partially_translated> - частично переведенные тексты
            <untranslated> - непереведенные тексты
            <coverage_percentage> - процент покрытия переводами
        </statistics>
        
        <items> - список непереведенных текстов
            <item id=""1"" timestamp=""2023-10-15T14:30:25"" quality=""0.2""> - элемент с непереведенным текстом
                <original> - оригинальный текст
                    Текст оригинала
                </original>
                <partial_translation> - частичный перевод (если есть)
                    Текст частичного перевода
                </partial_translation>
                <untranslated_terms> - непереведенные термины (если анализ доступен)
                    <term>термин 1</term>
                    <term>термин 2</term>
                </untranslated_terms>
            </item>
        </items>
    </untranslated_texts>
    ");


                    XmlDeclaration xmlDeclaration = xmlDoc.CreateXmlDeclaration("1.0", "UTF-8", null);
                    xmlDoc.AppendChild(xmlDeclaration);

                    xmlDoc.AppendChild(comment);

                    XmlElement rootElement = xmlDoc.CreateElement("untranslated_texts");
                    xmlDoc.AppendChild(rootElement);

                    XmlElement statisticsElement = xmlDoc.CreateElement("statistics");
                    rootElement.AppendChild(statisticsElement);

                    AddStatElement(xmlDoc, statisticsElement, "total_texts", "0");
                    AddStatElement(xmlDoc, statisticsElement, "fully_translated", "0");
                    AddStatElement(xmlDoc, statisticsElement, "partially_translated", "0");
                    AddStatElement(xmlDoc, statisticsElement, "untranslated", "0");
                    AddStatElement(xmlDoc, statisticsElement, "coverage_percentage", "0%");

                    XmlElement itemsElement = xmlDoc.CreateElement("items");
                    rootElement.AppendChild(itemsElement);

                    xmlDoc.Save(untranslatedXmlPath);
                    GreyHackRussianPlugin.Log.LogInfo($"Создан XML-файл для непереведенных текстов: {untranslatedXmlPath}");
                }
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка при инициализации XML-файла: {ex.Message}");
            }
        }

        /// <summary>
        /// Вспомогательный метод для добавления элемента статистики
        /// </summary>
        private static void AddStatElement(XmlDocument xmlDoc, XmlElement parent, string name, string value)
        {
            XmlElement element = xmlDoc.CreateElement(name);
            element.InnerText = value;
            parent.AppendChild(element);
        }

        /// <summary>
        /// Сохраняет непереведенный текст в XML файл
        /// </summary>
        private static void SaveUntranslatedTextToXml(string original, string partialTranslation, float quality)
        {
            try
            {
                // Проверяем существование директории
                string directory = Path.GetDirectoryName(untranslatedXmlPath);
                if (!Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }

                // Создаем файл, если не существует
                if (!File.Exists(untranslatedXmlPath))
                {
                    InitializeXmlFile();
                }

                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.Load(untranslatedXmlPath);

                // Получаем корневой элемент
                XmlElement rootElement = xmlDoc.DocumentElement;

                // Получаем элемент items
                XmlElement itemsElement = (XmlElement)rootElement.SelectSingleNode("items");
                if (itemsElement == null)
                {
                    itemsElement = xmlDoc.CreateElement("items");
                    rootElement.AppendChild(itemsElement);
                }

                // Проверяем, существует ли уже этот текст
                XmlNodeList existingItems = itemsElement.SelectNodes($"item/original[text()='{EscapeXml(original)}']");
                if (existingItems.Count > 0)
                {
                    // Текст уже существует, обновляем его
                    foreach (XmlNode existingItem in existingItems)
                    {
                        XmlElement itemElement = (XmlElement)existingItem.ParentNode;
                        itemElement.SetAttribute("timestamp", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"));
                        itemElement.SetAttribute("quality", quality.ToString("0.00"));

                        XmlElement translationElement = (XmlElement)itemElement.SelectSingleNode("partial_translation");
                        if (translationElement == null)
                        {
                            translationElement = xmlDoc.CreateElement("partial_translation");
                            itemElement.AppendChild(translationElement);
                        }
                        translationElement.InnerText = partialTranslation;

                        // Получаем непереведенные термины
                        List<string> untranslatedTerms = GetUntranslatedTerms(original, partialTranslation);

                        // Обновляем список непереведенных терминов
                        XmlElement termsElement = (XmlElement)itemElement.SelectSingleNode("untranslated_terms");
                        if (termsElement == null)
                        {
                            termsElement = xmlDoc.CreateElement("untranslated_terms");
                            itemElement.AppendChild(termsElement);
                        }
                        else
                        {
                            termsElement.InnerXml = ""; // Очищаем существующие термины
                        }

                        // Добавляем новые термины
                        foreach (string term in untranslatedTerms)
                        {
                            XmlElement termElement = xmlDoc.CreateElement("term");
                            termElement.InnerText = term;
                            termsElement.AppendChild(termElement);
                        }
                    }
                }
                else
                {
                    // Создаем новый элемент item
                    XmlElement itemElement = xmlDoc.CreateElement("item");
                    itemElement.SetAttribute("id", (itemsElement.ChildNodes.Count + 1).ToString());
                    itemElement.SetAttribute("timestamp", DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"));
                    itemElement.SetAttribute("quality", quality.ToString("0.00"));

                    // Добавляем оригинальный текст
                    XmlElement originalElement = xmlDoc.CreateElement("original");
                    originalElement.InnerText = original;
                    itemElement.AppendChild(originalElement);

                    // Добавляем частичный перевод
                    XmlElement translationElement = xmlDoc.CreateElement("partial_translation");
                    translationElement.InnerText = partialTranslation;
                    itemElement.AppendChild(translationElement);

                    // Получаем непереведенные термины
                    List<string> untranslatedTerms = GetUntranslatedTerms(original, partialTranslation);

                    // Добавляем список непереведенных терминов
                    if (untranslatedTerms.Count > 0)
                    {
                        XmlElement termsElement = xmlDoc.CreateElement("untranslated_terms");
                        itemElement.AppendChild(termsElement);

                        foreach (string term in untranslatedTerms)
                        {
                            XmlElement termElement = xmlDoc.CreateElement("term");
                            termElement.InnerText = term;
                            termsElement.AppendChild(termElement);
                        }
                    }

                    // Добавляем элемент в список
                    itemsElement.AppendChild(itemElement);
                }

                // Обновляем статистику
                UpdateStatistics(xmlDoc);

                // Сохраняем файл
                xmlDoc.Save(untranslatedXmlPath);

                GreyHackRussianPlugin.Log.LogInfo($"Сохранен непереведенный текст в XML файл (качество перевода: {quality:P0})");
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка при сохранении непереведенного текста в XML: {ex.Message}");
            }
        }

        /// <summary>
        /// Экранирует специальные символы XML
        /// </summary>
        private static string EscapeXml(string text)
        {
            return text.Replace("&", "&amp;")
                       .Replace("<", "&lt;")
                       .Replace(">", "&gt;")
                       .Replace("\"", "&quot;")
                       .Replace("'", "&apos;");
        }

        /// <summary>
        /// Обновляет статистику в XML файле
        /// </summary>
        private static void UpdateStatistics(XmlDocument xmlDoc)
        {
            try
            {
                XmlElement statisticsElement = (XmlElement)xmlDoc.DocumentElement.SelectSingleNode("statistics");
                if (statisticsElement == null)
                {
                    statisticsElement = xmlDoc.CreateElement("statistics");
                    xmlDoc.DocumentElement.PrependChild(statisticsElement);
                }

                // Подсчитываем статистику
                int totalTexts = translatedCount + untranslatedCount;
                int fullyTranslated = translatedCount;
                int partiallyTranslated = 0;
                int untranslated = 0;

                // Подсчитываем частично переведенные и непереведенные тексты
                XmlNodeList items = xmlDoc.DocumentElement.SelectNodes("items/item");
                foreach (XmlNode item in items)
                {
                    float quality;
                    if (float.TryParse(((XmlElement)item).GetAttribute("quality"), out quality))
                    {
                        if (quality <= 0.1f)
                            untranslated++;
                        else
                            partiallyTranslated++;
                    }
                }

                // Рассчитываем процент покрытия
                float coveragePercentage = totalTexts > 0 ? (float)fullyTranslated / totalTexts : 0;

                // Обновляем элементы статистики
                UpdateStatElement(statisticsElement, "total_texts", totalTexts.ToString());
                UpdateStatElement(statisticsElement, "fully_translated", fullyTranslated.ToString());
                UpdateStatElement(statisticsElement, "partially_translated", partiallyTranslated.ToString());
                UpdateStatElement(statisticsElement, "untranslated", untranslated.ToString());
                UpdateStatElement(statisticsElement, "coverage_percentage", $"{coveragePercentage:P0}");
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка при обновлении статистики: {ex.Message}");
            }
        }

        /// <summary>
        /// Обновляет элемент статистики
        /// </summary>
        private static void UpdateStatElement(XmlElement statisticsElement, string name, string value)
        {
            XmlElement element = (XmlElement)statisticsElement.SelectSingleNode(name);
            if (element == null)
            {
                element = statisticsElement.OwnerDocument.CreateElement(name);
                statisticsElement.AppendChild(element);
            }
            element.InnerText = value;
        }

        /// <summary>
        /// Получает список непереведенных терминов путем сравнения оригинального и переведенного текста
        /// </summary>
        private static List<string> GetUntranslatedTerms(string original, string translation)
        {
            List<string> untranslatedTerms = new List<string>();

            // Делим на слова
            string[] originalWords = original.Split(new[] { ' ', '\n', '\t', '.', ',', ';', ':', '(', ')', '[', ']', '<', '>' }, StringSplitOptions.RemoveEmptyEntries);

            // Формируем потенциальные термины (слова и словосочетания длиной до 3 слов)
            for (int i = 0; i < originalWords.Length; i++)
            {
                string word = originalWords[i].Trim().ToLower();

                // Пропускаем игнорируемые слова и короткие слова
                if (ignoredWords.Contains(word) || word.Length < 4)
                    continue;

                // Проверяем термин длиной 1 слово
                if (!translation.ToLower().Contains(word) && !untranslatedTerms.Contains(word))
                {
                    untranslatedTerms.Add(originalWords[i]);
                }

                // Проверяем термины длиной 2-3 слова
                for (int j = 1; j <= 2 && i + j < originalWords.Length; j++)
                {
                    string phrase = string.Join(" ", originalWords, i, j + 1);
                    if (!translation.ToLower().Contains(phrase.ToLower()) && !untranslatedTerms.Contains(phrase))
                    {
                        untranslatedTerms.Add(phrase);
                    }
                }
            }

            return untranslatedTerms;
        }

        /// <summary>
        /// Проверяет, является ли текст непереведенным на основе порога перевода
        /// </summary>
        private static bool IsUntranslated(string original, string translated)
        {
            if (original == translated) return true;

            // Делим на слова и считаем переведенные
            string[] originalWords = original.Split(new[] { ' ', '\n', '\t', '.', ',', ';', ':', '(', ')', '[', ']', '<', '>' },
                StringSplitOptions.RemoveEmptyEntries);

            string[] translatedWords = translated.Split(new[] { ' ', '\n', '\t', '.', ',', ';', ':', '(', ')', '[', ']', '<', '>' },
                StringSplitOptions.RemoveEmptyEntries);

            // Исключаем игнорируемые слова
            int originalCount = 0;
            foreach (var word in originalWords)
            {
                if (!ignoredWords.Contains(word.Trim().ToLower()))
                    originalCount++;
            }

            if (originalCount == 0) return false; // Все слова игнорируемые

            // Считаем процент переведенных слов (если совпадают оригинал и перевод, слово не переведено)
            float translationPercent = 1.0f - (float)Math.Min(originalCount, translatedWords.Length) / (float)originalCount;

            return translationPercent < translationThreshold;
        }

        /// <summary>
        /// Создает структурированный перевод блока текста с использованием алгоритмического перевода
        /// </summary>
        private static string BuildTranslatedBlock(string original)
        {
            // Сначала пытаемся перевести весь блок
            string translatedBlock = TranslateByParts(original);

            // Если это не помогло или перевод недостаточный, разбиваем на строки
            if (IsUntranslated(original, translatedBlock))
            {
                StringBuilder builder = new StringBuilder();
                string[] lines = original.Split(new[] { '\n' }, StringSplitOptions.None);

                foreach (var line in lines)
                {
                    // Переводим каждую строку
                    string translatedLine = TranslateByParts(line);
                    builder.AppendLine(translatedLine);
                }

                // Проверяем результат построчного перевода
                string lineByLineTranslation = builder.ToString().TrimEnd();

                // Используем лучший вариант перевода
                if (!IsUntranslated(original, lineByLineTranslation))
                    translatedBlock = lineByLineTranslation;
            }

            return translatedBlock;
        }

        /// <summary>
        /// Интеллектуальный перевод по частям с сохранением форматирования
        /// </summary>
        private static string TranslateByParts(string original)
        {
            string result = original;

            // Сохраняем HTML теги, заменяя их на временные метки
            Dictionary<string, string> htmlTags = new Dictionary<string, string>();
            int tagIndex = 0;

            // Особая обработка цветных тегов для сервисов ssh/ftp/http
            Regex serviceRegex = new Regex(@"<color=#0FABFFFF>([a-z]+)</color>");
            foreach (Match match in serviceRegex.Matches(original))
            {
                string service = match.Value;
                string placeholder = $"__SERVICE_{tagIndex}__";
                htmlTags[placeholder] = service;
                result = result.Replace(service, placeholder);
                tagIndex++;
            }

            // Регулярное выражение для поиска других HTML тегов
            var tagRegex = new Regex(@"<[^>]+>");
            foreach (Match match in tagRegex.Matches(result))
            {
                string tag = match.Value;
                if (!htmlTags.ContainsValue(tag)) // Пропускаем уже сохраненные сервисные теги
                {
                    string placeholder = $"__TAG_{tagIndex}__";
                    htmlTags[placeholder] = tag;
                    result = result.Replace(tag, placeholder);
                    tagIndex++;
                }
            }

            // Обработка специальных случаев (полные фразы с путями и т.д.)
            foreach (var specialCase in specialCases)
            {
                result = result.Replace(specialCase.Key, specialCase.Value);
            }

            // 1. Проверяем полные блоки текста через словарь переводов
            foreach (var kvp in Translation.Translator.TranslationDictionary)
            {
                if (result.Contains(kvp.Key) && kvp.Key.Length > 10)
                {
                    result = result.Replace(kvp.Key, kvp.Value);
                }
            }

            // 2. Заменяем общие фразы
            foreach (var phrase in commonPhrases)
            {
                if (result.Contains(phrase.Key))
                {
                    result = result.Replace(phrase.Key, phrase.Value);
                }
            }

            // 3. Применяем регулярные выражения для шаблонных замен
            foreach (var pattern in patterns)
            {
                result = Regex.Replace(result, pattern.Key, pattern.Value);
            }

            // Восстанавливаем HTML теги
            foreach (var tag in htmlTags)
            {
                result = result.Replace(tag.Key, tag.Value);
            }

            return result;
        }

        /// <summary>
        /// Harmony Postfix - вызывается после оригинального метода
        /// </summary>
        [HarmonyPostfix]
        static void Postfix(ref string __result)
        {
            try
            {
                // Проверка на пустую строку
                if (string.IsNullOrEmpty(__result))
                    return;

                string original = __result;

                // Проверяем, был ли этот текст уже переведен ранее
                if (translationCache.TryGetValue(original, out string cachedTranslation))
                {
                    __result = cachedTranslation;
                    GreyHackRussianPlugin.Log.LogInfo($"[Кэш] Использован кэшированный перевод описания ({translatedCount})");
                    return;
                }

                // Многоуровневый подход к переводу
                string translated = original;

                // 1. Сначала пытаемся найти точный перевод
                translated = Translation.Translator.TranslateTextIgnoreCase(original);

                // 2. Если точного перевода нет, пытаемся перевести частями с поддержкой форматирования HTML
                if (translated == original)
                {
                    translated = TranslateByParts(original);
                }

                // Если произошел перевод (хотя бы частичный)
                if (translated != original)
                {
                    // Проверяем качество перевода
                    bool isNotFullyTranslated = IsUntranslated(original, translated);

                    if (isNotFullyTranslated)
                    {
                        // Текст переведен частично - сохраняем в XML для анализа
                        GreyHackRussianPlugin.Log.LogInfo($"[!] Перевод неполный, качество ниже порога ({translationThreshold * 100}%)");

                        // Вычисляем примерное качество перевода
                        float translationQuality = CalculateTranslationQuality(original, translated);

                        // Сохраняем в XML только если качество ниже порогового значения
                        SaveUntranslatedTextToXml(original, translated, translationQuality);
                    }

                    // Используем частичный перевод
                    __result = translated;
                    translatedCount++;

                    // Добавляем в кэш для повторного использования
                    translationCache[original] = translated;

                    // Выводим информацию о переводе в лог (первые 100 символов)
                    int previewLength = Math.Min(100, original.Length);
                    string originalPreview = original.Substring(0, previewLength) + (original.Length > previewLength ? "..." : "");
                    string translatedPreview = translated.Substring(0, Math.Min(100, translated.Length)) + (translated.Length > previewLength ? "..." : "");

                    // Логирование
                    GreyHackRussianPlugin.Log.LogInfo("=== ПЕРЕВОД ОПИСАНИЯ ЭКСПЛОЙТА ===");
                    GreyHackRussianPlugin.Log.LogInfo($"Перевод #{translatedCount}");
                    GreyHackRussianPlugin.Log.LogInfo($"ОРИГИНАЛ: {originalPreview}");
                    GreyHackRussianPlugin.Log.LogInfo($"ПЕРЕВОД: {translatedPreview}");
                    GreyHackRussianPlugin.Log.LogInfo("================================");
                }
                else
                {
                    // Текст не переведен совсем
                    untranslatedCount++;

                    // Сохраняем в XML для последующего анализа
                    SaveUntranslatedTextToXml(original, original, 0.0f);

                    // Вывод в лог
                    GreyHackRussianPlugin.Log.LogInfo($"[!] Не найден перевод для описания ({original.Length} символов)");
                    GreyHackRussianPlugin.Log.LogInfo($"===== НЕПЕРЕВЕДЕННЫЙ ТЕКСТ =====");
                    GreyHackRussianPlugin.Log.LogInfo(original);
                    GreyHackRussianPlugin.Log.LogInfo("===============================");
                }
            }
            catch (Exception ex)
            {
                GreyHackRussianPlugin.Log.LogError($"Ошибка при переводе описания: {ex.Message}");
                GreyHackRussianPlugin.Log.LogDebug($"Stack trace: {ex.StackTrace}");
            }
        }

        /// <summary>
        /// Рассчитывает примерное качество перевода (от 0.0 до 1.0)
        /// </summary>
        private static float CalculateTranslationQuality(string original, string translated)
        {
            // Делим на слова
            string[] originalWords = original.Split(new[] { ' ', '\n', '\t', '.', ',', ';', ':', '(', ')', '[', ']', '<', '>' },
                StringSplitOptions.RemoveEmptyEntries);

            string[] translatedWords = translated.Split(new[] { ' ', '\n', '\t', '.', ',', ';', ':', '(', ')', '[', ']', '<', '>' },
                StringSplitOptions.RemoveEmptyEntries);

            // Исключаем игнорируемые слова
            int originalCount = 0;
            int sameWordsCount = 0;

            // Подсчитываем количество значимых слов в оригинале
            foreach (var word in originalWords)
            {
                string trimmedWord = word.Trim().ToLower();
                if (!ignoredWords.Contains(trimmedWord) && trimmedWord.Length >= 3)
                {
                    originalCount++;

                    // Проверяем, есть ли это слово в переводе
                    if (translated.ToLower().Contains(trimmedWord))
                    {
                        sameWordsCount++;
                    }
                }
            }

            if (originalCount == 0) return 1.0f; // Все слова игнорируемые или очень короткие

            // Возвращаем долю переведенных слов
            return 1.0f - ((float)sameWordsCount / (float)originalCount);
        }
    }
}