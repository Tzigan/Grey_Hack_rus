using BepInEx.Logging;
using System;

namespace GreyHackRussianPlugin.DebugTools
{
    /// <summary>
    /// Класс для работы с логированием перевода эксплойтов
    /// </summary>
    public class ExploitLogger
    {
        private readonly ManualLogSource _logger;
        private const string TAG = "[ExploitPatch]";

        public ExploitLogger(ManualLogSource logger)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        public void LogError(string message, Exception ex = null)
        {
            // Ошибки логируем всегда
            _logger.LogError($"{TAG} {message}");

            // Трассировку стека только в Debug
#if DEBUG
            if (ex != null)
            {
                _logger.LogDebug($"{TAG} Трассировка стека: {ex.StackTrace}");
            }
#endif
        }

        public void LogInfo(string message)
        {
            // Базовую информацию логируем всегда
            _logger.LogInfo($"{TAG} {message}");
        }

        public void LogCacheUsage(int translationCount)
        {
            // Функция доступна всегда, но логирование только в Debug
#if DEBUG
            _logger.LogInfo($"[Кэш] Использован кэшированный перевод описания ({translationCount})");
#endif
        }

        public void LogPartialTranslation(float threshold)
        {
#if DEBUG
            _logger.LogInfo($"[!] Перевод неполный, качество ниже порога ({threshold * 100}%)");
#endif
        }

        public void LogXmlSave(float quality)
        {
#if DEBUG
            _logger.LogInfo($"Сохранен непереведенный текст в XML файл (качество перевода: {quality:P0})");
#endif
        }

        public void LogTranslation(int translationCount, string originalPreview, string translatedPreview)
        {
#if DEBUG
            _logger.LogInfo("=== ПЕРЕВОД ОПИСАНИЯ ЭКСПЛОЙТА ===");
            _logger.LogInfo($"Перевод #{translationCount}");
            _logger.LogInfo($"ОРИГИНАЛ: {originalPreview}");
            _logger.LogInfo($"ПЕРЕВОД: {translatedPreview}");
            _logger.LogInfo("================================");
#endif
        }

        public void LogMissingTranslation(string original)
        {
#if DEBUG
            _logger.LogInfo($"[!] Не найден перевод для описания ({original.Length} символов)");
            _logger.LogInfo("===== НЕПЕРЕВЕДЕННЫЙ ТЕКСТ =====");
            _logger.LogInfo(original);
            _logger.LogInfo("===============================");
#endif
        }

        public void LogDebug(string message)
        {
#if DEBUG
            _logger.LogDebug($"{TAG} {message}");
#endif
        }
    }
}