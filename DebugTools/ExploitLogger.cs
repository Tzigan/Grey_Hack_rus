using BepInEx.Logging;
using System;

namespace GreyHackRussianPlugin.DebugTools
{
    /// <summary>
    /// Класс для централизованного логирования информации о переводе эксплойтов
    /// </summary>
    public class ExploitLogger
    {
        private readonly ManualLogSource _logger;
        private const string TAG = "[ExploitPatch]";

        public ExploitLogger(ManualLogSource logger)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        // Всегда доступно в обеих версиях
        public void LogError(string message, Exception ex = null)
        {
            _logger.LogError($"{TAG} {message}");

#if DEBUG
        if (ex != null)
        {
            _logger.LogDebug($"{TAG} Трассировка стека: {ex.StackTrace}");
        }
#endif
        }

        // Базовая информационная запись - доступна всегда
        public void LogInfo(string message)
        {
            _logger.LogInfo($"{TAG} {message}");
        }

        // Все методы ниже доступны только в Debug версии
#if DEBUG
    public void LogCacheUsage(int translationCount)
    {
        _logger.LogInfo($"[Кэш] Использован кэшированный перевод описания ({translationCount})");
    }
    
    public void LogPartialTranslation(float threshold)
    {
        _logger.LogInfo($"[!] Перевод неполный, качество ниже порога ({threshold * 100}%)");
    }
    
    public void LogXmlSave(float quality)
    {
        _logger.LogInfo($"Сохранен непереведенный текст в XML файл (качество перевода: {quality:P0})");
    }
    
    public void LogTranslation(int translationCount, string originalPreview, string translatedPreview)
    {
        _logger.LogInfo("=== ПЕРЕВОД ОПИСАНИЯ ЭКСПЛОЙТА ===");
        _logger.LogInfo($"Перевод #{translationCount}");
        _logger.LogInfo($"ОРИГИНАЛ: {originalPreview}");
        _logger.LogInfo($"ПЕРЕВОД: {translatedPreview}");
        _logger.LogInfo("================================");
    }
    
    public void LogMissingTranslation(string original)
    {
        _logger.LogInfo($"[!] Не найден перевод для описания ({original.Length} символов)");
        _logger.LogInfo("===== НЕПЕРЕВЕДЕННЫЙ ТЕКСТ =====");
        _logger.LogInfo(original);
        _logger.LogInfo("===============================");
    }
    
    public void LogDebug(string message)
    {
        _logger.LogDebug($"{TAG} {message}");
    }
#endif
    }
}