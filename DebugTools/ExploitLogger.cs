using BepInEx.Logging;
using System;

namespace GreyHackRussianPlugin.DebugTools
{
    /// <summary>
    /// Класс для централизованного логирования информации о переводе эксплойтов
    /// </summary>
    public class ExploitLogger
    {
        private readonly ManualLogSource _logger;
        private readonly bool _isDebugEnabled;
        private const string TAG = "[ExploitPatch]";

        /// <summary>
        /// Создает новый экземпляр логгера для эксплойтов
        /// </summary>
        /// <param name="logger">Основной логгер плагина</param>
        /// <param name="isDebugEnabled">Включить подробное логирование</param>
        public ExploitLogger(ManualLogSource logger, bool isDebugEnabled = true)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _isDebugEnabled = isDebugEnabled;
        }

        /// <summary>
        /// Логирует использование кэша перевода
        /// </summary>
        public void LogCacheUsage(int translationCount)
        {
            _logger.LogInfo($"[Кэш] Использован кэшированный перевод описания ({translationCount})");
        }

        /// <summary>
        /// Логирует неполный перевод
        /// </summary>
        public void LogPartialTranslation(float threshold)
        {
            _logger.LogInfo($"[!] Перевод неполный, качество ниже порога ({threshold * 100}%)");
        }

        /// <summary>
        /// Логирует сохранение непереведенного текста в XML
        /// </summary>
        public void LogXmlSave(float quality)
        {
            _logger.LogInfo($"Сохранен непереведенный текст в XML файл (качество перевода: {quality:P0})");
        }

        /// <summary>
        /// Логирует перевод эксплойта
        /// </summary>
        public void LogTranslation(int translationCount, string originalPreview, string translatedPreview)
        {
            _logger.LogInfo("=== ПЕРЕВОД ОПИСАНИЯ ЭКСПЛОЙТА ===");
            _logger.LogInfo($"Перевод #{translationCount}");
            _logger.LogInfo($"ОРИГИНАЛ: {originalPreview}");
            _logger.LogInfo($"ПЕРЕВОД: {translatedPreview}");
            _logger.LogInfo("================================");
        }

        /// <summary>
        /// Логирует отсутствие перевода
        /// </summary>
        public void LogMissingTranslation(string original)
        {
            _logger.LogInfo($"[!] Не найден перевод для описания ({original.Length} символов)");
            _logger.LogInfo("===== НЕПЕРЕВЕДЕННЫЙ ТЕКСТ =====");
            _logger.LogInfo(original);
            _logger.LogInfo("===============================");
        }

        /// <summary>
        /// Логирует ошибку
        /// </summary>
        public void LogError(string message, Exception ex = null)
        {
            _logger.LogError($"{TAG} {message}");

            if (ex != null && _isDebugEnabled)
            {
                _logger.LogDebug($"{TAG} Трассировка стека: {ex.StackTrace}");
            }
        }

        /// <summary>
        /// Логирует информационное сообщение
        /// </summary>
        public void LogInfo(string message)
        {
            _logger.LogInfo($"{TAG} {message}");
        }

        /// <summary>
        /// Логирует отладочное сообщение (только если включен режим отладки)
        /// </summary>
        public void LogDebug(string message)
        {
            if (_isDebugEnabled)
            {
                _logger.LogDebug($"{TAG} {message}");
            }
        }
    }
}