using HarmonyLib;
using GreyHackTranslator;
using UnityEngine;
using System;
using System.Reflection;
using Debug = UnityEngine.Debug;

namespace GreyHackTranslator.Patches
{
    // Патч для метода GenerateDescription класса Exploit, используя AccessTools
    [HarmonyPatch]
    public class ExploitDescriptionPatch
    {
        private const string DEBUG_PREFIX = "[GH_RUS_EXPLOIT] ";

        // Динамически находим метод для патча
        static MethodBase TargetMethod()
        {
            try
            {
                // Ищем тип Exploit по имени
                var exploitType = AccessTools.TypeByName("Exploit");
                if (exploitType != null)
                {
                    TranslatorPlugin.EmergencyLog($"Найден тип Exploit: {exploitType.FullName}");

                    // Ищем метод GenerateDescription
                    var method = AccessTools.Method(exploitType, "GenerateDescription");
                    if (method != null)
                    {
                        TranslatorPlugin.EmergencyLog($"Найден метод GenerateDescription");
                        return method;
                    }
                    else
                    {
                        TranslatorPlugin.EmergencyLog("Метод GenerateDescription не найден");
                    }
                }
                else
                {
                    TranslatorPlugin.EmergencyLog("Тип Exploit не найден");
                }
            }
            catch (Exception ex)
            {
                TranslatorPlugin.EmergencyLog($"Ошибка при поиске метода: {ex.Message}\n{ex.StackTrace}");
            }
            return null;
        }

        // Постфикс вызовется после оригинального метода
        static void Postfix(object __instance)
        {
            try
            {
                // Получаем тип объекта __instance
                Type exploitType = __instance.GetType();

                // Получаем текущее описание через рефлексию
                var descriptionField = exploitType.GetField("description",
                    BindingFlags.NonPublic | BindingFlags.Instance);

                if (descriptionField != null)
                {
                    string originalDescription = (string)descriptionField.GetValue(__instance);

                    // Логируем оригинальное описание
                    TranslatorPlugin.EmergencyLog($"Оригинальное описание эксплойта: {originalDescription}");

                    // Переводим описание
                    string translatedDescription = TranslatorPlugin.TranslateText(originalDescription);

                    // Устанавливаем переведённое описание
                    descriptionField.SetValue(__instance, translatedDescription);

                    // Логируем успешный перевод
                    TranslatorPlugin.EmergencyLog($"Описание эксплойта переведено");
                }
                else
                {
                    TranslatorPlugin.EmergencyLog("Не удалось найти поле description в классе Exploit");
                }
            }
            catch (Exception ex)
            {
                TranslatorPlugin.EmergencyLog($"Ошибка в патче ExploitDescription: {ex.Message}\n{ex.StackTrace}");
            }
        }
    }

    // Дополнительно патчим метод, возвращающий описание
    [HarmonyPatch]
    public class ExploitGetDescriptionPatch
    {
        // Динамически находим метод для патча
        static MethodBase TargetMethod()
        {
            try
            {
                // Ищем тип Exploit по имени
                var exploitType = AccessTools.TypeByName("Exploit");
                if (exploitType != null)
                {
                    // Ищем метод GetShopDescription
                    var method = AccessTools.Method(exploitType, "GetShopDescription");
                    if (method != null)
                    {
                        TranslatorPlugin.EmergencyLog($"Найден метод GetShopDescription");
                        return method;
                    }
                    else
                    {
                        TranslatorPlugin.EmergencyLog("Метод GetShopDescription не найден");
                    }
                }
            }
            catch (Exception ex)
            {
                TranslatorPlugin.EmergencyLog($"Ошибка при поиске метода: {ex.Message}");
            }
            return null;
        }

        static void Postfix(ref string __result)
        {
            try
            {
                if (!string.IsNullOrEmpty(__result))
                {
                    string originalDescription = __result;

                    // Переводим результат метода
                    __result = TranslatorPlugin.TranslateText(originalDescription);

                    TranslatorPlugin.EmergencyLog($"Перехвачен GetShopDescription");
                }
            }
            catch (Exception ex)
            {
                TranslatorPlugin.EmergencyLog($"Ошибка в патче GetShopDescription: {ex.Message}");
            }
        }
    }
}